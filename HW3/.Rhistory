#model. Which predictors appeared to be most significant?
#Are there any surprises in the predictors that ended up being significant or
#not significant?
?knn.ereg
?knn.reg
?FNN::knn.reg
summary m4
summary (m4)
unload(FNN)
detach(FNN)
detatch(FNN)
detach("package:FNN", unload=TRUE)
# Part 1
```{r}
spam_test <- read.csv("~/ProgramZ/stat365/HW2/spam_test.csv")
spam_train <- read.csv("~/ProgramZ/stat365/HW2/spam_train.csv")
require(FNN)
```
## Get the column with the na values in both test and train set. Also get response variable column.
```{r}
nacol_name <- "capital_run_length_average"
nacol_test <- which(colnames(spam_test)==nacol_name)
col_resp <- which(colnames(spam_train)=="spam")
nacol_train <- which(colnames(spam_train)==nacol_name)
```
## Scale both test and train data, and remove the response variable.
```{r}
scale_test <- spam_test
scale_train <- spam_train
scale_test[,-nacol_test] <- as.data.frame(scale(scale_test[,-nacol_test]))
scale_train[,-c(nacol_train,col_resp)] <- as.data.frame(scale(scale_train[,-c(nacol_train,col_resp)]))
scale_train$spam <-NULL
```
## Get row in test for which there are na values, run knn and replace the na values in original dataset
```{r}
na_r <- which(is.na(spam_test$capital_run_length_average))
test <- FNN:knn.reg(scale_test[-na_r,-nacol_test],test=scale_test[na_r,-nacol_test],y=scale_test[-na_r,nacol_test],k=15)
spam_test[na_r,nacol_test] <- test$pred
```
## Do the same for train
```{r}
na_r2 <- which(is.na(spam_train$capital_run_length_average))
train<-knn.reg(scale_train[-na_r2,-nacol_train],test=scale_train[na_r2,-nacol_train],y=scale_train[-na_r2,nacol_train],k=15)
spam_train[na_r2,nacol_train] <- train$pred
```
# Part 2
```{r}
knnclass <- function(xtrain, xtest, ytrain) {
#standardize training and test using training set only
trainMeans <- apply(xtrain, 2, function(y) mean(y))
trainSD <- apply(xtrain, 2, function(y) sd(y))
xtest <- (xtest-as.list(trainMeans))/as.list(trainSD)
xtrain <- (xtrain-as.list(trainMeans))/as.list(trainSD)
#split training into training and validation
#set.seed(123)
ntrain <- nrow(xtrain)
s <- sample(1:ntrain, (4*ntrain)/5, replace = FALSE)
trainSet <- xtrain[s,]
trainY <- ytrain[s]
valSet <- xtrain[-s,]
valY <- ytrain[-s]
testSet <- xtest
#function that calculates euc dist to each row in test. Used in the function below
euc.dist <- function(testrow,traindata) {
sum <- apply(((as.list(testrow)-traindata)^2),1,sum)
return(sqrt(sum))
}
#function that gets the distance matrix for ONE row in test to all rows in train
getDistMatrix <- function(xtestrow,xtrain) {
eucDist<-as.vector(euc.dist(xtestrow,xtrain))
numberedRows <- c(1:nrow(xtrain))
eucDistDF <- data.frame(numberedRows,eucDist)
sortDistDF <- eucDistDF[order(eucDistDF$eucDist),]
return(sortDistDF)
}
#Sorted distance list containing distance matrix for each test row. Only need to do this once, each calculation from k=2 to 15 will use the same matrix. test set is the validation set.
sortDistDFV <- apply(valSet,1,getDistMatrix,xtrain=trainSet)
#function that gets the classification for each testrow
getClassfn <- function(kDistDF, y) {
kYClass <- y[kDistDF[,1]]
class <- as(names(which.max(table(kYClass))), Class=mode(y))
return(class)
}
#classification
kclass <- function(sortDistDFV,y,k) {
get.predic <- function(sortDistDF,y,k) {
sortDistDF <- (sortDistDF)
kDistDF <- sortDistDF[1:k,]
class <- getClassfn(kDistDF,y)
return (class)
}
#lapply because sortDistDFV is a list. (apply returns list).
predicted <- lapply(sortDistDFV,get.predic,y=y,k=k)
predicted <- (as.vector(unlist(predicted)))
return (predicted)
}
#function to calculate misclassfication error rate
mer <- function(pred,actual) {
matchv <- mapply(function(x,y) {ifelse ((x==y),0,1)}, pred, actual,SIMPLIFY=TRUE)
return(sum(matchv)/length(pred))
}
#We get the misclassfication error rate for each k 2:15.
nK <- 15
kCount <- c(2:nK)
kDF <- data.frame(kCount,rep(NA,nK-1))
colnames(kDF) <- c("K","MER")
for (i in 2:nK) {
pred <- kclass(sortDistDFV,y=trainY,k=i)
e <- mer(pred,valY)
kDF$MER[i-1] <- e
}
kDF <- kDF[order(kDF$MER),]
#optimal k is the one with lowest MER, first item in the ordered vector.
optK <- kDF$K[1]
#Now get the distance matrix list for the actual test set.
sortDistDFV_final <- apply(testSet,1,getDistMatrix,xtrain=xtrain)
finalPred <- kclass(sortDistDFV_final,ytrain,optK)
}
```
# part 3
## (cont'd from part 1): We have set up variables such that the UNSCALED train and test data WITH filled in N/A values are called spam_train and spam_test respectively.
```{r}
spam <- spam_train$spam
```
## first (KNN without capital run ave length)
```{r}
spam_train_first <- spam_train
spam_test_first <- spam_test
spam_train_first$spam <- NULL
#get rid of captital_run_length_average predictor
spam_train_first$capital_run_length_average <- NULL
spam_test_first$capital_run_length_average <- NULL
knn_pred1 <- knnclass(spam_train_first,spam_test_first,spam)
source('~/.active-rstudio-document', echo=TRUE)
require(FNN)
detach("package:FNN", unload=TRUE)
spam_test <- read.csv("~/ProgramZ/stat365/HW2/spam_test.csv")
spam_train <- read.csv("~/ProgramZ/stat365/HW2/spam_train.csv")
require(FNN)
detach("package:FNN", unload=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
logm_pred1 <- predict(m3, newdata=spam_test_third, type="response")
logm_pred2 <- predict(m4, newdata=spam_test_fourth, type="response")
HW2_tk553_results <- data.frame(spam_test$capital_run_length_average,knn_pred1,knn_pred2,logm_pred1,logm_pred2)
View(HW2_tk553_results)
HW2_tk553_results
setwd("~/ProgramZ/stat365/HW2")
write.csv(HW2_tk553_results, file = "HW2_tk553_results.csv",row.names=FALSE)
HW2_tk553_results <- read.csv("~/ProgramZ/stat365/HW2/HW2_tk553_results.csv")
View(HW2_tk553_results)
source('~/ProgramZ/stat365/HW2/HW2_tk553_knnclass.R', echo=TRUE)
knit("HW2_tk553.Rmd","HW2_tk553.md")
markdownToHTML("HW2_tk553.md","HW2_tk553.html")
browseURL(paste('file://', file.path(getwd(),'HW2_tk553.html'), sep=''))
require(knitr)
knit("HW2_tk553.Rmd","HW2_tk553.md")
markdownToHTML("HW2_tk553.md","HW2_tk553.html")
browseURL(paste('file://', file.path(getwd(),'HW2_tk553.html'), sep=''))
require(markdown)
markdownToHTML("HW2_tk553.md","HW2_tk553.html")
browseURL(paste('file://', file.path(getwd(),'HW2_tk553.html'), sep=''))
require(knitr)
require(markdown)
knit("HW2_tk553.Rmd","HW2_tk553.md")
markdownToHTML("HW2_tk553.md","HW2_tk553.html")
browseURL(paste('file://', file.path(getwd(),'HW2_tk553.html'), sep=''))
require(knitr)
require(markdown)
knit("HW2_tk553.Rmd","HW2_tk553.md")
markdownToHTML("HW2_tk553.md","HW2_tk553.html")
browseURL(paste('file://', file.path(getwd(),'HW2_tk553.html'), sep=''))
setwd("~/ProgramZ/stat365/HW3")
digits_train <- read.csv("~/ProgramZ/stat365/HW3/digits_train.csv")
View(digits_train)
digits_valid <- read.csv("~/ProgramZ/stat365/HW3/digits_valid.csv")
View(digits_valid)
digits_test <- read.csv("~/ProgramZ/stat365/HW3/digits_test.csv")
View(digits_test)
View(digits_train)
View(digits_test)
View(digits_valid)
d <- digits_train[,-257]
d
View(d)
View(digits_train)
d2 <- (digits_train[,-257])
matrix(digits,train[4,-257], 16, 16, byrow=TRUE)
matrix(digits_train[4,-257], 16, 16, byrow=TRUE)
plotDigit <- function(k, dat) {
p <- matrix(as.numeric(dat[k,1:256]),16,16)
image(x=1:16, y=1:16, p[,16:1], xlab="", ylab="",
main=paste("Row: ", k, " | Digit: ", dat[k,257]))
}
matrix(digits_train[4,], 16, 16, byrow=TRUE)
matrix(digits_train[4,-257], 16, 16, byrow=TRUE)
plot(4,data_train)
plot(4,digits_train)
plotDigit(4,digits_train)
plotDigit(1,digits_train)
plotDigit(2,digits_train)
plotDigit(3,digits_train)
?apply
?ifelse
digits_train[1,][257]
digits_train[1,][257] ==1
plotD <- function(v) {
p <- matrix(as.numeric(v[1:256]),16,16)
image(x=1:16, y=1:16, p[,16:1], xlab="", ylab="",
main=paste("Digit: ", v[257]))
}
apply(digits_train,1,function(x) ifelse((x[257] == 5),plotD(x)))
apply(digits_train,1,function(x) if(x[257] == 5) plotD(x))
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 5) {plotDigit(i,dat)}
}
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 5) {plotDigit(i,digits_train)}
}
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 1) {plotDigit(i,digits_train)}
}
plotDigit(489,digits_train)
plotDigit(452,digits_train)
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 7) {plotDigit(i,digits_train)}
}
plotDigit(560,digits_train)
plotDigit(417,digits_train)
plotDigit(315,digits_train)
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 3) {plotDigit(i,digits_train)}
}
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 8) {plotDigit(i,digits_train)}
}
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 6) {plotDigit(i,digits_train)}
}
plotAllDigit <- function (k, dat) {
for (i in 1:nrow(digits_train)) {
if (digits_train[i,257] == 6) {plotDigit(i,digits_train)}
}
}
plotAllDigit(1, digit_train)
#plot all the images for a single digit
plotAllDigit <- function (k, dat) {
for (i in 1:nrow(dat)) {
if (dat[i,257] == k) {plotDigit(i,dat)}
}
}
plotAllDigit(1, digit_train)
plotAllDigit(1, digits_train)
plotDigit(607,digits_train)
plotDigit(192,digits_train)
plotDigit(633,digits_train)
plotDigit(359,digits_train)
plotDigit(417,digits_train)
plotDigit(560,digits_train)
plotDigit(623,digits_train)
plotDigit(359,digits_train)
plotDigit(452,digits_train)
plotDigit(489,digits_train)
plotAllDigit(5,digits_train)
plotAllDigit(6,digits_train)
table(digits_train$digit)
plotAllDigit(0,digits_train)
plotAllDigit(6,digits_train)
plotDigit(377,digits_train)
plotDigit(567,digits_train)
plotDigit(344,digits_train)
plotAllDigit(9,digits_train)
plotAllDigit(5,digits_train)
plotDigit(377,digits_train)
plotDigit(567,digits_train)
plotDigit(470,digits_train)
plotAllDigit(5,digits_train)
vector(null)
vector()
c()
INFTY
INFINITY
infinity
Ift
Inf
Inf >0
#misclassfication error rate
mer <- function(pred,actual) {
matchv <- mapply(function(x,y) {ifelse ((x==y),0,1)}, pred, actual,SIMPLIFY=TRUE)
return(sum(matchv)/length(pred))
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_val[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_val[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_test, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_val[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_test, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_val[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_val, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_val, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
sum (list(0,102))
sum (as.vector(list(0,102))
)
sum (unlist(list(0,102))
)
#misclassfication error rate
mer <- function(pred,actual) {
matchv <- mapply(function(x,y) {ifelse ((x==y),0,1)}, pred, actual,SIMPLIFY=TRUE)
return(sum(unlist(matchv))/length(pred))
}
#misclassfication error rate
mer <- function(pred,actual) {
matchv <- mapply(function(x,y) {ifelse ((x==y),0,1)}, pred, actual,SIMPLIFY=TRUE)
return(sum(unlist(matchv))/length(pred))
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_val, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
WARNINGS()
warnings()
#misclassfication error rate
mer <- function(pred,actual) {
matchv <- mapply(function(x,y) {ifelse ((x==y),0,1)}, pred, actual, SIMPLIFY = TRUE)
return(sum(unlist(matchv))/length(pred))
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- knn.reg(knn_train, knn_val, knn_resp_train)
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
minkK
minK
mer(c(0,1,1),c(1,1,1))
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- (knn.reg(knn_train, knn_val, knn_resp_train))$pred
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {minMER = merval; minK = i}
}
minK
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- (knn.reg(knn_train, knn_val, knn_resp_train))$pred
merval <- mer(pred,knn_resp_val)
if (merval<minMER) {print("changed");minMER = merval; minK = i}
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- (knn.reg(knn_train, knn_val, knn_resp_train, i))$pred
merval <- mer(pred,knn_resp_val)
print(merval)
if (merval<minMER) {minMER = merval; minK = i}
}
minK
minMER
?knn.reg
require(FNN)
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 2:15) {
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=i))$pred
merval <- mer(pred,knn_resp_val)
print(merval)
if (merval<minMER) {minMER = merval; minK = i}
}
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 1:50) {
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=i))$pred
merval <- mer(pred,knn_resp_val)
print(merval)
if (merval<minMER) {minMER = merval; minK = i}
}
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=3))$pred
pred
ceiling(pred)
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 1:50) {
pred <- ceiling((knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=i))$pred)
merval <- mer(pred,knn_resp_val)
print(merval)
if (merval<minMER) {minMER = merval; minK = i}
}
round(4.33)
round(4.6)
knn_resp_train <- digits_train[,257]
knn_resp_val <- digits_valid[,257]
knn_train <- digits_train[,-257]
knn_val <- digits_valid[,-257]
minK <- Inf
minMER <- Inf
for (i in 1:20) {
pred <- round((knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=i))$pred)
merval <- mer(pred,knn_resp_val)
print(merval)
if (merval<minMER) {minMER = merval; minK = i}
}
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=3))$pred
round(pred)
knn_resp_val
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=1))$pred
round(pred)
knn_resp_val
pred <- (knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=0))$pred
pred
?ldsa
?lda
require(MASS)
?lda
ldaModel <- lda(digits~.,digits_train)
ldaPred <- predict(ldaModel)$class
digits_train$digits
digits_train$digit
ldaModel <- lda(digit~.,digits_train)
ldaPred <- predict(ldaModel)$class
ldaPred
table(ldapred,digits_train$digit)
table(ldaPred,digits_train$digit)
?predict
p <- predict(ldaModel)
p
ldaModel <- lda(digit~.,digits_train)
ldaPred <- predict(ldaModel,newdata=digits_valid)
ldaPred
ldaPred <- predict(ldaModel,newdata=digits_valid)$class
ldaPred
mer(ldaPred,knn_resp_val)
minMER
table(ldaPred, knn_resp_val)
pred <- round((knn.reg(knn_train, test=knn_val, y=knn_resp_train, k=1))$pred)
table(pred, knn_resp_val)
View(digits_test)
ncol(digits_test)
digits_test$pix100
digits_test$pix101
digits_test$pix250
